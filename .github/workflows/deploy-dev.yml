name: Deploy to DEV

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: household-finances
  CONTAINER_NAME: api

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: dev   # ðŸ‘ˆ matches GitHub Environment "dev"
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (DEV)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image
        id: build
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          ECR_REGISTRY=${{ steps.ecr.outputs.registry }}
          ECR_REPO="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}"
          docker build -t "${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" .
          docker tag "${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" "$ECR_REPO:$IMAGE_TAG"
          docker tag "${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" "$ECR_REPO:latest"
          docker push "$ECR_REPO:$IMAGE_TAG"
          docker push "$ECR_REPO:latest"
          echo "image=$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render ECS task def
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/taskdef.dev.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Smoke test
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.HEALTHCHECK_URL }}")
            if [ "$code" = "200" ]; then
              echo "Service healthy"; exit 0
            fi
            echo "Waiting... ($i/20)"
            sleep 10
          done
          echo "Service did not become healthy" >&2
          exit 1

      - name: Smoke test
        run: |
          for i in {1..20}; do
            http_code=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.HEALTHCHECK_URL }}")
            if [ "$http_code" = "200" ]; then
              echo "OK"; exit 0
            fi
            echo "Waiting for service... ($i/20)"
            sleep 10
          done
          echo "Service did not become healthy" >&2
          exit 1
